
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> .libPaths(c("/global/home/users/skyqiu/R/x86_64-pc-linux-gnu-library/4.2",
+             .libPaths()))
> library(ggplot2)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(hal9001)
Loading required package: Rcpp
hal9001 v0.4.6: The Scalable Highly Adaptive Lasso
note: fit_hal defaults have changed. See ?fit_hal for details
> library(devtools)
Loading required package: usethis
> library(purrr)
> library(simCadlag)
> load_all()
ℹ Loading simHAL

Attaching package: ‘data.table’

The following object is masked from ‘package:purrr’:

    transpose

The following objects are masked from ‘package:dplyr’:

    between, first, last

> 
> # SIMULATION PARAMETERS --------------------------------------------------------
> B <- 200
> n_min <- 300
> n_max <- 3000
> n_test <- 10000
> p_min <- 3
> p_max <- 10
> max_degree <- 3
> num_knots <- 100
> dist_names <- c("normal", "uniform", "binomial")
> results_list <- list()
> 
> # RUN SIMULATION ---------------------------------------------------------------
> for (b in 1:B) {
+   # sample simulation parameters
+   n <- sample(n_min:n_max, 1)
+   p <- sample(p_min:p_max, 1)
+ 
+   # generate true function
+   cadlag_fun <- Cadlag$new(n_vars = p, max_degree = max_degree)
+   cadlag_fun$gen_formula()
+   df <- cadlag_fun$gen_samples(n)
+   df_test <- cadlag_fun$gen_samples(n_test)
+   print("Data: " %+% b %+% "; n = " %+% n %+% "; d = " %+% p)
+ 
+   # data characteristics
+   dist_factor <- factor(map_vec(cadlag_fun$rv_list, ~.x$dist_name),
+                         levels = dist_names)
+   dist_counts <- as.numeric(table(dist_factor))
+ 
+   # fit quantile-screened HAL
+   hal_quant_time_0 <- Sys.time()
+   basis_list_quant <- enumerate_basis(x = df$X,
+                                       max_degree = max_degree,
+                                       smoothness_orders = 0,
+                                       num_knots = num_knots,
+                                       screen_knots = FALSE)
+   hal_quant_fit <- fit_hal(X = df$X,
+                            Y = df$Y,
+                            smoothness_orders = 0,
+                            family = "gaussian",
+                            basis_list = basis_list_quant)
+   hal_quant_time_1 <- Sys.time()
+   hal_quant_time <- as.numeric(hal_quant_time_1 - hal_quant_time_0)
+   pred_quant <- predict(hal_quant_fit, new_data = df_test$X)
+   r_squared_quant <- get_r_square(pred_quant, df_test$Y)
+   selected_bases_quant <- length(hal_quant_fit$basis_list[hal_quant_fit$coefs[-1] != 0])
+   tol_bases_quant <- length(hal_quant_fit$basis_list)
+ 
+   # fit k-means-screened HAL
+   hal_kmeans_time_0 <- Sys.time()
+   basis_list_kmeans <- enumerate_basis(x = df$X,
+                                        max_degree = max_degree,
+                                        smoothness_orders = 0,
+                                        num_knots = num_knots,
+                                        screen_knots = TRUE)
+   hal_kmeans_fit <- fit_hal(X = df$X,
+                             Y = df$Y,
+                             smoothness_orders = 0,
+                             family = "gaussian",
+                             basis_list = basis_list_kmeans)
+   hal_kmeans_time_1 <- Sys.time()
+   hal_kmeans_time <- as.numeric(hal_kmeans_time_1 - hal_kmeans_time_0)
+   pred_kmeans <- predict(hal_kmeans_fit, new_data = df_test$X)
+   r_squared_kmeans <- get_r_square(pred_kmeans, df_test$Y)
+   selected_bases_kmeans <- length(hal_kmeans_fit$basis_list[hal_kmeans_fit$coefs[-1] != 0])
+   tol_bases_kmeans <- length(hal_kmeans_fit$basis_list)
+ 
+   # collect results
+   results_list[[b]] <- list(n = n,
+                             p = p,
+                             total_var_norm = cadlag_fun$total_var_norm,
+                             normal = dist_counts[1],
+                             uniform = dist_counts[2],
+                             binomial = dist_counts[3],
+                             r_squared_quant = r_squared_quant,
+                             r_squared_kmeans = r_squared_kmeans,
+                             selected_bases_quant = selected_bases_quant,
+                             selected_bases_kmeans = selected_bases_kmeans,
+                             tol_bases_quant = tol_bases_quant,
+                             tol_bases_kmeans = tol_bases_kmeans,
+                             hal_quant_time = hal_quant_time,
+                             hal_kmeans_time = hal_kmeans_time)
+ }
[1] "Data: 1; n = 1746; d = 3"
[1] "Data: 2; n = 976; d = 9"
[1] "Data: 3; n = 2148; d = 6"
[1] "Data: 4; n = 2267; d = 7"
[1] "Data: 5; n = 1288; d = 5"
[1] "Data: 6; n = 2945; d = 8"
[1] "Data: 7; n = 2898; d = 5"
[1] "Data: 8; n = 2678; d = 8"
[1] "Data: 9; n = 1159; d = 5"
[1] "Data: 10; n = 517; d = 7"
[1] "Data: 11; n = 2650; d = 9"
[1] "Data: 12; n = 1389; d = 6"
[1] "Data: 13; n = 1028; d = 4"
[1] "Data: 14; n = 1799; d = 6"
[1] "Data: 15; n = 2208; d = 6"
[1] "Data: 16; n = 2883; d = 10"
[1] "Data: 17; n = 2259; d = 9"
[1] "Data: 18; n = 1161; d = 9"
[1] "Data: 19; n = 909; d = 6"
[1] "Data: 20; n = 938; d = 3"
[1] "Data: 21; n = 1565; d = 4"
[1] "Data: 22; n = 2657; d = 9"
[1] "Data: 23; n = 824; d = 5"
[1] "Data: 24; n = 2630; d = 4"
[1] "Data: 25; n = 2363; d = 10"
[1] "Data: 26; n = 2483; d = 7"
[1] "Data: 27; n = 2001; d = 10"
[1] "Data: 28; n = 1815; d = 5"
[1] "Data: 29; n = 616; d = 3"
[1] "Data: 30; n = 1071; d = 3"
[1] "Data: 31; n = 1010; d = 5"
[1] "Data: 32; n = 2655; d = 5"
[1] "Data: 33; n = 860; d = 3"
[1] "Data: 34; n = 706; d = 3"
[1] "Data: 35; n = 1135; d = 4"
[1] "Data: 36; n = 987; d = 9"
[1] "Data: 37; n = 2211; d = 6"
[1] "Data: 38; n = 382; d = 3"
[1] "Data: 39; n = 2964; d = 5"
[1] "Data: 40; n = 790; d = 9"
[1] "Data: 41; n = 2334; d = 3"
[1] "Data: 42; n = 1055; d = 3"
[1] "Data: 43; n = 700; d = 3"
[1] "Data: 44; n = 1563; d = 5"
[1] "Data: 45; n = 2303; d = 5"
[1] "Data: 46; n = 1883; d = 4"
[1] "Data: 47; n = 2748; d = 7"
[1] "Data: 48; n = 2302; d = 7"
[1] "Data: 49; n = 2273; d = 5"
[1] "Data: 50; n = 1878; d = 8"
[1] "Data: 51; n = 2961; d = 6"
[1] "Data: 52; n = 1557; d = 3"
[1] "Data: 53; n = 1358; d = 8"
[1] "Data: 54; n = 1254; d = 10"
[1] "Data: 55; n = 1713; d = 6"
[1] "Data: 56; n = 2988; d = 5"
[1] "Data: 57; n = 1920; d = 7"
[1] "Data: 58; n = 751; d = 8"
[1] "Data: 59; n = 444; d = 7"
[1] "Data: 60; n = 1438; d = 10"
[1] "Data: 61; n = 1481; d = 3"
[1] "Data: 62; n = 435; d = 9"
[1] "Data: 63; n = 2453; d = 7"
[1] "Data: 64; n = 1575; d = 4"
[1] "Data: 65; n = 902; d = 5"
[1] "Data: 66; n = 686; d = 7"
[1] "Data: 67; n = 1541; d = 5"
[1] "Data: 68; n = 1822; d = 3"
[1] "Data: 69; n = 1386; d = 8"
[1] "Data: 70; n = 1534; d = 10"
[1] "Data: 71; n = 2150; d = 9"
[1] "Data: 72; n = 2602; d = 5"
[1] "Data: 73; n = 592; d = 4"
[1] "Data: 74; n = 1145; d = 3"
[1] "Data: 75; n = 1392; d = 3"
[1] "Data: 76; n = 2512; d = 6"
[1] "Data: 77; n = 740; d = 8"
[1] "Data: 78; n = 2963; d = 5"
[1] "Data: 79; n = 1362; d = 7"
[1] "Data: 80; n = 2685; d = 10"
[1] "Data: 81; n = 1958; d = 6"
[1] "Data: 82; n = 1911; d = 5"
[1] "Data: 83; n = 848; d = 9"
[1] "Data: 84; n = 2486; d = 10"
[1] "Data: 85; n = 740; d = 6"
[1] "Data: 86; n = 397; d = 5"
[1] "Data: 87; n = 881; d = 5"
[1] "Data: 88; n = 1589; d = 9"
[1] "Data: 89; n = 625; d = 6"
[1] "Data: 90; n = 347; d = 10"
[1] "Data: 91; n = 1214; d = 8"
[1] "Data: 92; n = 1648; d = 10"
[1] "Data: 93; n = 1711; d = 8"
[1] "Data: 94; n = 1279; d = 3"
[1] "Data: 95; n = 2201; d = 8"
[1] "Data: 96; n = 894; d = 5"
[1] "Data: 97; n = 1113; d = 7"
[1] "Data: 98; n = 1990; d = 7"
[1] "Data: 99; n = 1531; d = 3"
[1] "Data: 100; n = 2964; d = 3"
[1] "Data: 101; n = 2821; d = 8"
[1] "Data: 102; n = 2641; d = 5"
[1] "Data: 103; n = 2893; d = 9"
[1] "Data: 104; n = 2483; d = 8"
[1] "Data: 105; n = 2238; d = 9"
[1] "Data: 106; n = 1720; d = 5"
[1] "Data: 107; n = 404; d = 7"
[1] "Data: 108; n = 1968; d = 7"
[1] "Data: 109; n = 1662; d = 7"
[1] "Data: 110; n = 1781; d = 10"
[1] "Data: 111; n = 2581; d = 4"
[1] "Data: 112; n = 776; d = 9"
[1] "Data: 113; n = 809; d = 7"
[1] "Data: 114; n = 2888; d = 3"
[1] "Data: 115; n = 564; d = 4"
[1] "Data: 116; n = 1992; d = 5"
[1] "Data: 117; n = 1393; d = 4"
[1] "Data: 118; n = 2156; d = 5"
[1] "Data: 119; n = 746; d = 8"
[1] "Data: 120; n = 2034; d = 7"
[1] "Data: 121; n = 2393; d = 8"
[1] "Data: 122; n = 680; d = 4"
[1] "Data: 123; n = 2748; d = 3"
[1] "Data: 124; n = 2783; d = 3"
[1] "Data: 125; n = 570; d = 8"
[1] "Data: 126; n = 2435; d = 5"
[1] "Data: 127; n = 751; d = 8"
[1] "Data: 128; n = 1592; d = 9"
[1] "Data: 129; n = 434; d = 6"
[1] "Data: 130; n = 1569; d = 7"
[1] "Data: 131; n = 2543; d = 5"
[1] "Data: 132; n = 1321; d = 7"
[1] "Data: 133; n = 588; d = 9"
[1] "Data: 134; n = 689; d = 9"
[1] "Data: 135; n = 1106; d = 8"
[1] "Data: 136; n = 1960; d = 7"
[1] "Data: 137; n = 765; d = 7"
[1] "Data: 138; n = 1771; d = 10"
[1] "Data: 139; n = 1444; d = 9"
[1] "Data: 140; n = 2160; d = 3"
[1] "Data: 141; n = 2625; d = 8"
[1] "Data: 142; n = 2017; d = 4"
[1] "Data: 143; n = 2808; d = 6"
[1] "Data: 144; n = 958; d = 7"
[1] "Data: 145; n = 1422; d = 8"
[1] "Data: 146; n = 444; d = 3"
[1] "Data: 147; n = 1549; d = 8"
[1] "Data: 148; n = 1570; d = 10"
[1] "Data: 149; n = 351; d = 5"
[1] "Data: 150; n = 2207; d = 10"
[1] "Data: 151; n = 916; d = 8"
[1] "Data: 152; n = 2999; d = 5"
[1] "Data: 153; n = 2213; d = 6"
[1] "Data: 154; n = 2541; d = 3"
[1] "Data: 155; n = 650; d = 4"
[1] "Data: 156; n = 2689; d = 5"
[1] "Data: 157; n = 2535; d = 10"
[1] "Data: 158; n = 1766; d = 3"
[1] "Data: 159; n = 579; d = 8"
[1] "Data: 160; n = 353; d = 7"
[1] "Data: 161; n = 1925; d = 8"
[1] "Data: 162; n = 422; d = 10"
[1] "Data: 163; n = 2962; d = 9"
[1] "Data: 164; n = 2499; d = 3"
[1] "Data: 165; n = 2751; d = 8"
[1] "Data: 166; n = 1382; d = 7"
[1] "Data: 167; n = 2327; d = 10"
[1] "Data: 168; n = 2095; d = 6"
[1] "Data: 169; n = 2472; d = 4"
[1] "Data: 170; n = 2005; d = 6"
[1] "Data: 171; n = 336; d = 8"
[1] "Data: 172; n = 683; d = 5"
[1] "Data: 173; n = 2622; d = 9"
[1] "Data: 174; n = 1229; d = 5"
[1] "Data: 175; n = 2244; d = 10"
[1] "Data: 176; n = 2063; d = 5"
[1] "Data: 177; n = 2242; d = 6"
[1] "Data: 178; n = 1479; d = 6"
[1] "Data: 179; n = 1954; d = 7"
[1] "Data: 180; n = 2376; d = 10"
[1] "Data: 181; n = 2253; d = 5"
[1] "Data: 182; n = 330; d = 6"
[1] "Data: 183; n = 2454; d = 4"
[1] "Data: 184; n = 632; d = 6"
[1] "Data: 185; n = 1240; d = 5"
[1] "Data: 186; n = 612; d = 9"
[1] "Data: 187; n = 1791; d = 7"
[1] "Data: 188; n = 2117; d = 6"
[1] "Data: 189; n = 1299; d = 10"
[1] "Data: 190; n = 2175; d = 6"
[1] "Data: 191; n = 365; d = 5"
[1] "Data: 192; n = 2406; d = 7"
[1] "Data: 193; n = 875; d = 4"
[1] "Data: 194; n = 1239; d = 4"
[1] "Data: 195; n = 1840; d = 8"
[1] "Data: 196; n = 2428; d = 6"
[1] "Data: 197; n = 2092; d = 4"
[1] "Data: 198; n = 2229; d = 8"
[1] "Data: 199; n = 2059; d = 5"
[1] "Data: 200; n = 1406; d = 7"
> 
> results <- do.call(rbind, lapply(results_list, data.frame, stringsAsFactors = FALSE))
> saveRDS(results, "out/002_max_degree_3.rds")
> 
> proc.time()
     user    system   elapsed 
21719.529   229.611 21664.055 
